{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let LekariService = /*#__PURE__*/(() => {\n  class LekariService {\n    constructor(http) {\n      this.http = http;\n      this.uri = 'http://localhost:4000/neregistrovan';\n    }\n\n    dohvatiLekare() {\n      return this.http.get(`${this.uri}/dohvatiLekare`);\n    }\n\n    sortImeAsc(lekari) {\n      let sviLekari = lekari;\n      return sviLekari.sort((l1, l2) => {\n        return l1.ime.localeCompare(l2.ime);\n      });\n    }\n\n    sortImeDes(lekari) {\n      let sviLekari = lekari;\n      return sviLekari.sort((l1, l2) => {\n        return l2.ime.localeCompare(l1.ime);\n      });\n    }\n\n    sortPrezimeAsc(lekari) {\n      let sviLekari = lekari;\n      return sviLekari.sort((l1, l2) => {\n        return l1.prezime.localeCompare(l2.prezime);\n      });\n    }\n\n    sortPrezimeDes(lekari) {\n      let sviLekari = lekari;\n      return sviLekari.sort((l1, l2) => {\n        return l2.prezime.localeCompare(l1.prezime);\n      });\n    }\n\n    sortSpecAsc(lekari) {\n      let sviLekari = lekari;\n      return sviLekari.sort((l1, l2) => {\n        return l1.specijalizacija.localeCompare(l2.specijalizacija);\n      });\n    }\n\n    sortSpecDes(lekari) {\n      let sviLekari = lekari;\n      return sviLekari.sort((l1, l2) => {\n        return l2.specijalizacija.localeCompare(l1.specijalizacija);\n      });\n    }\n\n    sortOgranakAsc(lekari) {\n      let sviLekari = lekari;\n      return sviLekari.sort((l1, l2) => {\n        return l1.ogranak.localeCompare(l2.ogranak);\n      });\n    }\n\n    sortOgranakDes(lekari) {\n      let sviLekari = lekari;\n      return sviLekari.sort((l1, l2) => {\n        return l2.ogranak.localeCompare(l1.ogranak);\n      });\n    }\n\n    pretraga(ime, prezime, specijalizacija) {\n      return new Promise((resolve, reject) => {\n        this.dohvatiLekare().subscribe(lekari => {\n          const sviLekari = lekari.filter(lekar => {\n            return lekar.ime.includes(ime) && lekar.prezime.includes(prezime) && lekar.specijalizacija.includes(specijalizacija);\n          });\n          resolve(sviLekari);\n        }, error => {\n          reject(error);\n        });\n      });\n    }\n\n    pretragaOgranak(ime, prezime, specijalizacija, ogranak) {\n      return new Promise((resolve, reject) => {\n        this.dohvatiLekare().subscribe(lekari => {\n          const sviLekari = lekari.filter(lekar => {\n            return lekar.ime.includes(ime) && lekar.prezime.includes(prezime) && lekar.specijalizacija.includes(specijalizacija) && lekar.ogranak.includes(ogranak);\n          });\n          resolve(sviLekari);\n        }, error => {\n          reject(error);\n        });\n      });\n    }\n\n    ulogujSe(kor_ime, lozinka) {\n      const data = {\n        kor_ime: kor_ime,\n        lozinka: lozinka\n      };\n      return this.http.post(`${this.uri}/ulogujSe`, data);\n    }\n\n    proveriKorIme(kor_ime) {\n      const data = {\n        kor_ime: kor_ime\n      };\n      return this.http.post(`${this.uri}/proveriKorIme`, data);\n    }\n\n    proveriKorImeZahtev(kor_ime) {\n      const data = {\n        kor_ime: kor_ime\n      };\n      return this.http.post(`${this.uri}/proveriKorImeZahtev`, data);\n    }\n\n    proveriLoz(lozinka) {\n      const regex = /^(?!.*(\\w)\\1)(?=.*[A-Z])(?=.*\\d)(?=.*[@#$%^&+=!])[A-Za-z][A-Za-z\\d@#$%^&+=!]{6,12}$/;\n      return regex.test(lozinka);\n    }\n\n    proveriMejlRegex(mejl) {\n      const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      return regex.test(mejl);\n    }\n\n    proveriMejlBaza(mejl) {\n      const data = {\n        imejl: mejl\n      };\n      return this.http.post(`${this.uri}/proveriMejlBaza`, data);\n    }\n\n    proveriMejlBazaZahtev(mejl) {\n      const data = {\n        imejl: mejl\n      };\n      return this.http.post(`${this.uri}/proveriMejlBazaZahtev`, data);\n    }\n\n    proveriTelefon(telefon) {\n      const regex = /^\\d{3}\\/\\d{6,7}$/;\n      return regex.test(telefon);\n    }\n\n    proveriSliku(slika, callback) {\n      const dozvoljeniFormati = ['image/jpeg', 'image/png'];\n\n      if (!dozvoljeniFormati.includes(slika.type)) {\n        return callback(new Error('Nedozvoljen format slike. Dozvoljeni formati su JPG i PNG'));\n      }\n\n      const minimalnaSirina = 100;\n      const minimalnaVisina = 100;\n      const maksimalnaSirina = 300;\n      const maksimalnaVisina = 300;\n      const img = new Image();\n      img.src = URL.createObjectURL(slika);\n\n      img.onload = () => {\n        if (img.width < minimalnaSirina || img.height < minimalnaVisina) {\n          return callback(new Error(`Slika je premala. Minimalne dimenzije su ${minimalnaSirina}x${minimalnaVisina} px`));\n        }\n\n        if (img.width > maksimalnaSirina || img.height > maksimalnaVisina) {\n          return callback(new Error(`Slika je prevelika. Maksimalne dimenzije su ${maksimalnaSirina}x${maksimalnaVisina} px`));\n        }\n\n        callback(null, 'Slika je u redu');\n      };\n\n      img.onerror = () => {\n        return callback(new Error('Greška pri čitanju dimenzija slike'));\n      };\n    }\n\n    posaljiZahtev(data) {\n      return this.http.post(`${this.uri}/posaljiZahtev`, data);\n    }\n\n    proveriStaruLoz(kor_ime, lozinka) {\n      const data = {\n        kor_ime: kor_ime,\n        lozinka: lozinka\n      };\n      return this.http.post(`${this.uri}/proveriStaruLoz`, data);\n    }\n\n    promeniLozinku(kor_ime, lozinka) {\n      const data = {\n        kor_ime: kor_ime,\n        lozinka: lozinka\n      };\n      return this.http.post(`${this.uri}/promeniLozinku`, data);\n    }\n\n  }\n\n  LekariService.ɵfac = function LekariService_Factory(t) {\n    return new (t || LekariService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  LekariService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LekariService,\n    factory: LekariService.ɵfac,\n    providedIn: 'root'\n  });\n  return LekariService;\n})();","map":null,"metadata":{},"sourceType":"module"}